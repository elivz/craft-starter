{% macro date(givenDate, format = 'long') %}
  {%- if format == 'short' %}
    {% set format = 'd.m.Y' %}
  {% endif -%}
  <time datetime="{{ givenDate.format('c') }}" pubdate>
    {{ givenDate|date(format) }}
  </time>
{% endmacro %}

{% macro dateRange(startDate, endDate) %}
  {%- spaceless %}
    {% if startDate|date('Y-m-d') == endDate|date('Y-m-d') %}
      {{ startDate|date('F j, Y') }}
    {% else %}
      {{ startDate|date('F j') }} &ndash;
      {% if startDate|date('m') == endDate|date('m') %}
        {{ endDate|date('j, Y') }}
      {% else %}
        {{ endDate|date('F j, Y') }}
      {% endif %}
    {% endif %}
  {% endspaceless -%}
{% endmacro %}

{% macro postMeta(post, links = true) %}
  {%- spaceless -%}
    {% import _self as m %}

    {% if post.section.handle == 'posts' %}
      {{ m.date(post.postDate, 'short') }}

      {% set topics = post.postTopics.all() %}
      {% if topics|length %}
        in
        {% for cat in topics %}
          {%- if links -%}
            <a href="{{ cat.url }}">{{ cat.title }}</a>
          {%- else -%}
            {{ cat.title }}
          {%- endif -%}
          {%- if not loop.last %},{% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  {%- endspaceless -%}
{% endmacro %}

{% macro breadcrumbs(crumbs = [], classes = '') %}
  {% if crumbs|length > 0 %}
    <ol class="list-reset font-sans text-sm {{ classes }}">
      {% for item in crumbs %}
        <li class="inline-block {{ loop.last ? 'uppercase' }}">
          {% if item.url ?? false %}
            <a href="{{ item.url }}">{{ item.title ?? item.name }}</a>
          {% else %}
            <span>{{ item.title ?? item.name }}</span>
          {% endif %}
        </li>
      {% endfor %}
    </ol>
  {% endif %}
{% endmacro %}

{% macro firstSentence(entry) %}
  {%- spaceless %}
    {% if not entry.isFieldEmpty('summary') %}
      {% set text = entry.summary %}
    {% elseif not entry.isFieldEmpty('introduction') %}
      {% set text = entry.introduction %}
    {% elseif not entry.isFieldEmpty('mainContent') %}
      {% set body = entry.mainContent %}
      {% set firstTextBlock = body.type('text').first() %}
      {% set text = firstTextBlock ? firstTextBlock.text : '' %}
    {% endif %}

    {% if text is defined and text != '' %}
      <p>{{ text|striptags|split('.', 2)[0]|raw }}.</p>
    {% endif %}
  {% endspaceless -%}
{% endmacro %}

{% macro emailLink(email, class = false) %}
  {%- spaceless %}
    {% if email %}
      <a href="mailto:{{ email }}" itemprop="email"{% if class %} class="{{ class }}"{% endif %}>{{ email }}</a>
    {% endif %}
  {% endspaceless -%}
{% endmacro %}

{% macro phoneLink(phone, class = false) %}
  {%- spaceless %}
    {% if phone %}
      <a href="tel:{{ phone|replace('/[^\\d]+/', '') }}" itemprop="telephone"{% if class %} class="{{ class }}"{% endif %}>{{ phone }}</a>
    {% endif %}
  {% endspaceless %}
{% endmacro -%}

{% macro srcset(image, options={}) %}
  {%- spaceless %}
    {% if image %}
      {# Default options #}
      {% set options = {
        alt: image.title ?? '',
        widths: [ 2500, 1800, 1200, 500 ],
        defaultWidthIndex: 1,
        sizes: '100vw',
        lazy: true,
        noscript: true,
        transformConfig: {}
      }|merge(options) %}

      {# Store the original width - we shouldn't generate transforms larger than this #}
      {% set originalWidth = image.width %}

      {# Create an array of transform definitions #}
      {% set transforms = [] %}
      {% for width in options.widths %}
        {% if width <= originalWidth %}
          {% set transforms = transforms|merge([{ width: width }]) %}
        {% elseif loop.first %}
          {% set transforms = transforms|merge([{ width: originalWidth * 1 }]) %}
        {% endif %}
      {% endfor %}

      {# Set transform options #}
      {% set transformConfig = options.transformConfig %}
      {% set transformConfig = transformConfig|merge({
        'fp-x': (image.getFocalPoint().x),
        'fp-y': (image.getFocalPoint().y)
      }) %}

      {# Do the transformations #}
      {% set transformed = craft.imager.transformImage(image, transforms, transformConfig) %}

      {% if transformed|length > 0 %}
        {# Default image src #}
        {% if transformed|length > options.defaultWidthIndex %}
          {% set defaultImg = transformed[options.defaultWidthIndex].url %}
        {% elseif transformed|length > 0 %}
          {% set defaultImg = transformed[0] %}
          {% set options = options|merge({ defaultWidthIndex: 0 }) %}
        {% endif %}

        {# Generate a very small copy to speed up getting the dominant color #}
        {% set tiny = craft.imager.transformImage(image, { width: 100, effects: { blur: 15 } }, transformConfig, { transformer: 'craft' }) %}

        {# Output it to the screen #}
        <img
          src="{{ options.lazy ? tiny.getDataUri() : defaultImg }}"
          {% if options.lazy %}data-{% endif %}srcset="{{ transformed|length > 1 ? craft.imager.srcset(transformed) : defaultImg }}"
          alt="{{ options.alt }}"
          sizes="{{ options.sizes }}"
          width="{{ transformed[options.defaultWidthIndex].width }}"
          height="{{ transformed[options.defaultWidthIndex].height }}"
          class="{% if options.lazy %}lazy {% endif %}{{ options.class ?? '' }}"
          style="object-position: {{ image.getFocalPoint().x * 100 }}% {{ image.getFocalPoint().y * 100 }}%"
          {{ (options.attr ?? '')|raw }}
        >
        {% if options.lazy and options.noscript %}
          <noscript>
            <img
              src="{{ defaultImg }}"
              alt="{{ options.alt }}"
              width="{{ transformed[options.defaultWidthIndex].width }}"
              height="{{ transformed[options.defaultWidthIndex].height }}"
              class="{{ options.class ?? '' }}"
              style="object-position: {{ image.getFocalPoint().x * 100 }}% {{ image.getFocalPoint().y * 100 }}%"
              {{ (options.attr ?? '')|raw }}
            >
          </noscript>
        {% endif %}
      {% endif %}
    {% endif %}
  {% endspaceless -%}
{% endmacro %}
